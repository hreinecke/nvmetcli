#!/usr/bin/python

'''
Simple json-rpc daemon, compatible with SPDK rpc

Copyright (c) 2021 by Hannes Reinecke, SUSE Linux LLC

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.
'''

from __future__ import print_function

import os
import sys
import json
import socket
import argparse
import base64
import uuid as UUID
import nvmet as nvme
try:
    from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
except ImportError:
    from http.server import HTTPServer
    from http.server import BaseHTTPRequestHandler

nvmet_sock = '/var/tmp/nvmet.sock'
nvmet_url = '/nvmet'

class BlockDevice:
    _path_prefix = dict( malloc='/dev/shm/', lvol='/srv/longhorn/')

    def __init__(self, name, uuid = None, type = 'any', mode = 'lookup'):
        self.name = name
        if type == 'any':
            if mode == 'create':
                raise NameError("Need to specify a mode for 'lookup'")
        elif type not in BlockDevice._path_prefix:
            raise NameError("Invalid bdev type %s" % type)

        if mode == 'lookup':
            if type == 'any':
                for p in BlockDevice._path_prefix:
                    self.prefix = BlockDevice._path_prefix[p]
                    if os.path.exists(self.prefix + name):
                        self.link_path = self.prefix + name
                        break
                if not self.link_path:
                    raise NameError("bdev %s not found" % name)
            else:
                self.prefix = BlockDevice._path_prefix[type]
                self.link_path = self.prefix + name
                if not os.path.exists(self.link_path):
                    raise NameError("%s bdev %s not found" % (type, name))
            try:
                self.uuid_path = os.readlink(self.link_path)
            except FileNotFoundError:
                raise RuntimeError("UUID symlink for bdev %s not found" % name)
            self.uuid = self.uuid_path[len(self.prefix):]
        else:
            self.prefix = BlockDevice._path_prefix[type]
            self.link_path = self.prefix + name
            if os.path.exists(self.prefix + name):
                raise NameError("%s bdev %s already exists" % (type, name))
            if uuid is None:
                self.uuid = str(UUID.uuid4())
            else:
                self.uuid = uuid
            self.uuid_path = self.prefix + self.uuid
            if os.path.exists(self.uuid_path):
                raise NameError("bdev %s already exists" % self.uuid_path)
            try:
                fd = open(self.uuid_path, 'x')
            except:
                raise NameError("Cannot create %s" % self.uuid_path)
            fd.close()
            try:
                os.symlink(self.uuid_path, self.link_path)
            except:
                raise RuntimeError("Failed to link %s to %s" % (self.link_path, self.uuid_path))

    def delete(self):
        try:
            os.remove(self.link_path)
        except FileNotFoundError:
            raise RuntimeError("link %s does not exist" % self.link_path)
        try:
            os.remove(self.uuid_path)
        except FileNotFoundError:
            raise RuntimeError("bdev %s does not exist" % self.uuid_path)

    def snapshot(self, clone, uuid=None):
        if not uuid:
            uuid = str(UUID.uuid4())
        clone_uuid_path = self.prefix + uuid
        if os.path.exists(clone_uuid_path):
            raise NameError("snapshot uuid %s already exists" % uuid)
        clone_link_path = self.prefix + clone
        if os.path.exists(clone_link_path):
            raise NameError("snapshot %s already exists" % clone)
        try:
            os.system("cp --reflink %s %s" % (self.uuid_path, clone_uuid_path) )
        except:
            raise RuntimeError("failed to clone bdev %s to %s" % (self.uuid_path, clone_uuid_path))
        try:
            os.symlink(clone_uuid_path, clone_link_path)
        except:
            raise RuntimeError("failed to link %s to %s" % (clone_link_path, clone_uuid_path))
        return clone

    def set_size(self, bdev_size):
        self.bdev_size = bdev_size
        try:
            os.truncate(self.uuid_path, self.bdev_size)
        except:
            raise RuntimeError("Failed to truncate %s" % self.uuid_path)

class SocketHandler:
    def __init__(self, sockname):
        self.sockname = sockname
        self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        try:
            self.sock.bind(self.sockname)
        except OSError:
            print("cannot bind to %s" % self.sockname)
            return None
        self.sock.listen(10)

    def __enter__(self):
        return self

    def rpc_server(self):
        while True:
            buf = ''
            closed = False
            response = None
            (client, address) = self.sock.accept()
            while not closed:
                newdata = client.recv(1024)
                if (newdata == b''):
                    closed = True
                buf += newdata.decode('ascii')
                try:
                    req = json.loads(buf)
                except ValueError:
                    continue
                rpc = nvme.JsonRPC()
                response = rpc.rpc_call(req)
                client.sendall(response.encode('ascii'))
                client.close()
                closed = True

    def rpc_shutdown(self):
        self.sock.close()

    def __exit__(self, exc_type, exc_value, traceback):
        os.remove(self.sockname)

class ServerHandler(BaseHTTPRequestHandler):
    key = ""

    def do_HEAD(self):
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()

    def do_AUTHHEAD(self):
        self.send_response(401)
        self.send_header('WWW-Authenticate', 'text/html')
        self.send_header('Content-type', 'text/html')
        self.end_headers()

    def do_INTERNALERROR(self):
        self.send_error(500, message='Internal Server Error',
                        explain='Failed to parse JSON RPC request')

    def do_NOTFOUND(self):
        self.send_error(404)

    def do_GET(self):
        self.send_error(501, message="Unsupported method ('%s')" % self.command)

    def do_PUT(self):
        self.send_error(501, message="Unsupported method ('%s')" % self.command)

    def do_POST(self):
        if self.path != self.directory:
            self.do_NOTFOUND()
            return
        if self.key and self.headers['Authorization'] != 'Basic ' + self.key:
            self.do_AUTHHEAD()
        else:
            data_string = self.rfile.read(int(self.headers['Content-Length']))
            try:
                req = json.loads(data_string)
            except ValueError:
                self.do_INTERNALERROR()
                return
            rpc = nvme.JsonRPC()
            response = rpc.rpc_call(req)
            self.do_HEAD()
            self.wfile.write(bytes(response.encode(encoding='ascii')))

def main():
    parser = argparse.ArgumentParser(description='JSON RPC proxy for nvmet')
    parser.add_argument('-s', '--socket', dest='sock', default=nvmet_sock,
                        help="Socket to listen on, default is " + nvmet_sock)
    parser.add_argument('-H', '--host', dest='host', help='Host address')
    parser.add_argument('-p', '--port', dest='port', type=int, default=4260,
                        help='Port number')
    parser.add_argument('-U', '--user', dest='user',
                        help='user name for authentication')
    parser.add_argument('-P', '--password', dest='password',
                        help='password for authentication')
    parser.add_argument('-c', '--cert', dest='cert',
                        help='SSL certificate')
    parser.add_argument('-u', '--url', dest='url', default=nvmet_url,
                        help="URL path to serve, default is " + nvmet_url)

    args = parser.parse_args()
    if args.user and not args.password:
        sys.exit("No password specified for username %s" % args.user)
    if args.password and not args.user:
        sys.exit("No username specified")
    if args.user:
        if not args.host:
            sys.exit("Username and password are only valid for HTTP server")
        key = base64.b64encode(bytes('%s:%s' % (args.user, args.password), 'utf-8')).decode('ascii')
        ServerHandler.key = key

    if args.url:
        ServerHandler.directory = args.url

    if os.geteuid() != 0:
       print("%s: must run as root." % sys.argv[0], file=sys.stderr)
       sys.exit(-1)


    if args.host:
        with HTTPServer((args.host, args.port), ServerHandler) as httpd:
            try:
                if args.cert is not None:
                    http.socket = ssl.wrap_socket(httpd.socket,
                                                  certfile=args.cert,
                                                  server_side=True)
                print("Started JSON RPC http proxy server on %s:%d key %s" % (args.host, args.port, key))
                httpd.serve_forever()
            except KeyboardInterrupt:
                print("Shutting down server")
                httpd.socket.close()
    else:
        with SocketHandler(args.sock) as s:
            try:
                print("Started JSON RPC proxy server on %s" % args.sock)
                s.rpc_server()
            except KeyboardInterrupt:
                print('Shutting down server')
                s.rpc_shutdown()

if __name__ == '__main__':
    main()
