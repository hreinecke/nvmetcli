#!/usr/bin/python

'''
Simple json-rpc daemon, compatible with SPDK rpc

Copyright (c) 2021 by Hannes Reinecke, SUSE Linux LLC

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.
'''

from __future__ import print_function

import os
import sys
import json
import socket
import kmod
import uuid as UUID
import nvmet as nvme

class BlockDevice:
    _path_prefix = dict( malloc='/dev/shm/', lvol='/home/longhorn')

    def __init__(self, name, uuid = None, type = 'any', mode = 'lookup'):
        self.name = name
        if type == 'any':
            if mode == 'create':
                raise NameError("Need to specify a mode for 'lookup'")
        elif type not in BlockDevice._path_prefix:
            raise NameError("Invalid bdev type %s" % type)

        if mode == 'lookup':
            if type == 'any':
                for p in BlockDevice._path_prefix:
                    self.prefix = BlockDevice._path_prefix[p]
                    if os.path.exists(self.prefix + name):
                        self.link_path = self.prefix + name
                        break
                if not self.link_path:
                    raise NameError("bdev %s not found" % name)
            else:
                self.prefix = BlockDevice._path_prefix[type]
                self.link_path = self.prefix + name
                if not os.path_exists(self.link_path):
                    raise NameError("%s bdev %s not found" % (type, name))
            try:
                self.uuid_path = os.readlink(self.link_path)
            except FileNotFoundError:
                raise RuntimeError("UUID symlink for bdev %s not found" % name)
            self.uuid = self.uuid_path[len(self.prefix):]
        else:
            self.prefix = BlockDevice._path_prefix[type]
            self.link_path = self.prefix + name
            if os.path.exists(self.prefix + name):
                raise NameError("%s bdev %s already exists" % (type, name))
            if uuid is None:
                self.uuid = str(UUID.uuid4())
            else:
                self.uuid = uuid
            self.uuid_path = self.prefix + self.uuid
            if os.path.exists(self.uuid_path):
                raise NameError("bdev %s already exists" % self.uuid_path)
            try:
                fd = open(self.uuid_path, 'x')
            except:
                raise NameError("Cannot create %s" % self.uuid_path)
            fd.close()
            try:
                os.symlink(self.uuid_path, self.link_path)
            except:
                raise RuntimeError("Failed to link %s to %s" % (self.link_path, self.uuid_path))

    def delete(self):
        try:
            os.remove(self.link_path)
        except FileNotFoundError:
            raise RuntimeError("link %s does not exist" % self.link_path)
        try:
            os.remove(self.uuid_path)
        except FileNotFoundError:
            raise RuntimeError("bdev %s does not exist" % self.uuid_path)

    def set_size(self, bdev_size):
        self.bdev_size = bdev_size
        try:
            os.truncate(self.uuid_path, self.bdev_size)
        except:
            raise RuntimeError("Failed to truncate %s" % self.uuid_path)

class JSONRPC:
    def _get_subsystems(self, params = None):
        return [s.dump() for s in self.cfg.subsystems]

    def _get_transports(self, params = None):
        km = kmod.Kmod()
        ml = []
        for m in km.loaded():
            if m.name.startswith("nvmet_"):
                ml.append(m.name[len("nvmet_"):])
            elif m.name == "nvme_loop":
                ml.append(m.name[len("nvme_"):])
        return ml

    def _create_transport(self, params):
        km = kmod.Kmod()
        trtype = params['trtype']
        try:
            km.modprobe("nvmet_" + trtype.lower())
        except:
            raise NameError("Module nvmet_%s not found" % trtype.lower())
        return

    def _create_subsystem(self, params):
        nqn = params['nqn']
        try:
            subsys = nvme.Subsystem(nqn, mode='create')
        except:
            raise RuntimeError("Failed to create subsystem %s" % nqn)
        if 'model_number' in params:
            model = params['model_number']
            if (len(model) > 40):
                subsys.delete()
                raise NameError("Model number longer than 40 characters")
            try:
                subsys.set_attr("attr", "model", model)
            except:
                subsys.delete()
                raise RuntimeError("Failed to set model %s" % model)
        if 'serial_number' in params:
            serial = params['serial_number']
            if len(serial) > 20:
                subsys.delete()
                raise NameError("Serial number longer than 20 characters")
            try:
                subsys.set_attr("attr", "serial", serial)
            except:
                subsys.delete()
                raise RuntimeError("Failed to set serial %s" % serial)
        if 'allow_any_host' in params:
            subsys.set_attr("attr", "allow_any_host", "1")
        return

    def _delete_subsystem(self, params):
        nqn = params['nqn']
        try:
            subsys = nvme.Subsystem(nqn, mode='lookup');
        except CFSError:
            raise NameError("Subsystem %s not found" % nqn)
        try:
            subsys.delete()
        except:
            raise RuntimeError("Failed to delete subsystem %s" % nqn)
        return

    def _add_ns(self, params):
        nqn = params['nqn']
        ns_params = params['namespace']
        bdev_name = ns_params['bdev_name']
        try:
            bdev = BlockDevice(bdev_name)
        except:
            raise NameError("bdev %s not found" % bdev_name)
        try:
            subsys = nvme.Subsystem(nqn, mode='lookup')
        except CFSError:
            raise NameError("Subsystem %s not found" % nqn)

        if 'nsid' in ns_params:
            nsid = ns_params['nsid']

        try:
            ns = nvme.Namespace(subsys, nsid, mode='create')
        except:
            raise NameError("Namespace %s already exists" % nsid)
        try:
            ns.set_attr("device", "uuid", bdev.uuid)
        except:
            ns.delete()
            raise RuntimeError("Failed to set uuid %s on ns %s" % (bdev.uuid, nsid))
        try:
            ns.set_attr("device", "path", bdev.uuid_path)
        except:
            ns.delete()
            raise RuntimeError("Failed to set path on ns %s" % nsid)
        # We should enable the namespace here, but it'll fail
        # if no ports are connected
        try:
            ns.set_enable(1)
        except:
            pass
        return

    def _remove_ns(self, params):
        nqn = params['nqn']
        nsid = params['nsid']
        try:
            subsys = nvme.Subsystem(nqn, mode='lookup')
        except CFSError:
            raise NameError("Subsystem %s not found" % nqn)
        try:
            ns = nvme.Namespace(subsys, nsid, mode='lookup')
        except CFSError:
            raise NameError("Namespace %d not found" % nsid)
        ns.delete()

    def _add_port(self, params):
        try:
            port = nvme.Port(mode='create')
        except:
            raise RuntimeError("Cannot create port")
        port_params = params['listen_address']
        for p in ('trtype', 'adrfam', 'traddr', 'trsvcid'):
            if p not in port_params:
                port.delete()
                raise NameError("Invalid listen_address parameter %s" % p)
            v = port_params[p]
            if p == 'adrfam':
                v = port_params[p].lower()
            try:
                port.set_attr("addr", p, v)
            except:
                port.delete()
                raise RuntimeError("Failed to set %s to %s" % (p, v))
        nqn = params['nqn']
        try:
            port.add_subsystem(nqn)
        except:
            port.delete()
            raise NameError("subsystem %s not found" % nqn)
        return

    def _remove_port(self, params):
        nqn = params['nqn']
        port_params = params['listen_address']
        for port in self.cfg.ports:
            for p in ('trtype', 'adrfam', 'traddr', 'trsvcid'):
                if p not in port_params:
                    continue
                if port.get_attr("addr", p) != port_params[p]:
                    continue
            for s in port.subsystems:
                if s != nqn:
                    continue
                port.remove_subsystem(nqn)
                if not len(port.subsystems):
                    port.delete()

    def _create_malloc(self, params):
        bdev_name = params['name']
        bdev_blocksize = params['block_size']
        bdev_blocks = params['num_blocks']
        if 'uuid' in params:
            bdev_uuid = params['uuid']
        else:
            bdev_uuid = None

        bdev = BlockDevice(bdev_name, bdev_uuid, type='malloc', mode='create')
        bdev.set_size(int(bdev_blocks) * int(bdev_blocksize))
        return bdev.name

    def _delete_malloc(self, params):
        bdev_name = params['name']
        try:
            bdev = BlockDevice(bdev_name, type='malloc')
        except:
            raise NameError("bdev %s not found" % bdev_name)
        bdev.delete()

    def _create_lvol(self, params):
        bdev_name = params['name']
        bdev_blocksize = params['block_size']
        bdev_blocks = params['num_blocks']
        if 'uuid' in params:
            bdev_uuid = params['uuid']
        else:
            bdev_uuid = None

        bdev = BlockDevice(bdev_name, bdev_uuid, type='lvol', mode='create')
        bdev.set_size(int(bdev_blocks) * int(bdev_blocksize))
        return bdev.name

    def _delete_lvol(self, params):
        bdev_name = params['name']
        try:
            bdev = BlockDevice(bdev_name, type='lvol')
        except:
            raise NameError("bdev %s not found" % bdev_name)
        bdev.delete()

    _rpc_methods = dict(bdev_malloc_create=_create_malloc,
                        bdev_malloc_delete=_delete_malloc,
                        bdev_lvol_create=_create_lvol,
                        bdev_lvol_delete=_delete_lvol,
                        nvmf_create_transport=_create_transport,
                        nvmf_get_transports=_get_transports,
                        nvmf_create_subsystem=_create_subsystem,
                        nvmf_delete_subsystem=_delete_subsystem,
                        nvmf_subsystem_add_ns=_add_ns,
                        nvmf_subsystem_remove_ns=_remove_ns,
                        nvmf_subsystem_add_listener=_add_port,
                        nvmf_subsystem_remove_listener=_remove_port,
                        nvmf_get_subsystems=_get_subsystems,
                        get_nvmf_subsystems=_get_subsystems)

    def __init__(self, sockname):
        self.cfg = nvme.Root()
        self.sockname = sockname
        self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        try:
            self.sock.bind(self.sockname)
        except OSError:
            print("cannot bind to %s" % self.sockname)
            return None
        self.sock.listen(10)

    def __enter__(self):
        return self

    def rpc_server(self):
        while True:
            buf = ''
            closed = False
            response = None
            (client, address) = self.sock.accept()
            while not closed:
                newdata = client.recv(1024)
                if (newdata == b''):
                    closed = True
                buf += newdata.decode('ascii')
                try:
                    req = json.loads(buf)
                except ValueError:
                    continue
                response = self.rpc_call(req)
                client.sendall(response.encode('ascii'))
                client.close()
                closed = True

    def rpc_call(self, req):
        print ("%s" % req)
        method = req['method']
        params = req['params']
        id = req['id']
        if method not in self._rpc_methods.keys():
            error = dict(code=-32601,message='Method not found')
            resp = json.dumps(dict(error=error, id=id, jsonrpc="2.0"))
        else:
            try:
                result = self._rpc_methods[method](self, params)
                resp = json.dumps(dict(result=result, id=id, jsonrpc="2.0"))
            except NameError as n:
                error = dict(code=-32602, message='Invalid params', data=n.args)
                resp = json.dumps(dict(error=error, id=id, jsonrpc="2.0"))
            except RuntimeError as err:
                error = dict(code=-32000, message=err.args)
                resp = json.dumps(dict(error=error, id=id, jsonrpc="2.0"))
            print ("%s" % resp)
        return resp

    def rpc_shutdown(self):
        self.sock.close()

    def __exit__(self, exc_type, exc_value, traceback):
        os.remove(self.sockname)

def main():
    sockname = '/var/tmp/spdk.sock'
    if os.geteuid() != 0:
       print("%s: must run as root." % sys.argv[0], file=sys.stderr)
       sys.exit(-1)

    if len(sys.argv) > 2:
        usage()

    if len(sys.argv) == 2:
        sockname = sys.argv[1]

    with JSONRPC(sockname) as s:
        try:
            print('Started RPC http proxy server')
            s.rpc_server()
        except KeyboardInterrupt:
            print('Shutting down server')
            s.rpc_shutdown()

if __name__ == '__main__':
    main()
